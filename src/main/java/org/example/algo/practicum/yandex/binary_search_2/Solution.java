package org.example.algo.practicum.yandex.binary_search_2;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;

//–ó–∞–¥–∞—á–∞: –¥–∞–Ω–∞ –±–∏–Ω–∞—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω—ã ùëÅ —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–∞–º—ã–π –ª–µ–≤—ã–π –µ—ë —ç–ª–µ–º–µ–Ω—Ç 0, –∞
//—Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π ‚Äî 1. –ù–∞–π–¥–∏—Ç–µ –ª—é–±–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ‚Äú01‚Äù.
// each sub-array should start with 0 and end with 1.
//find the smallest sub-array that starst with 0 and ends with 1.
public class Solution {

    static Pair<Integer, Integer> binarySearchSubArray(int[] arr) {
        int startIndx = 0;
        int endIndx = arr.length - 1;
        int mid = (arr.length - 1) / 2;

        while (startIndx < endIndx) {
            if (endIndx - startIndx == 1) { // When startIndx and endIndx are next to each other
                break;
            }
            if (arr[startIndx] == 0 && arr[mid] == 1) {
                endIndx = mid;
                mid = (startIndx + endIndx) / 2;
            } else if (arr[mid] == 0 && arr[endIndx] == 1) {
                startIndx = mid;
                mid = (startIndx + endIndx) / 2;
            }
            if (arr[startIndx] == 0 && arr[endIndx] == 1 && endIndx - startIndx == 1) { // When startIndx and endIndx are next to each other
                break;
            }
        }

        return new ImmutablePair<>(startIndx, endIndx);
    }
}
